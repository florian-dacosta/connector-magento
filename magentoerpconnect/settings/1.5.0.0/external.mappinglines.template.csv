"id","type_id:id","model_id:id","external_field","type","external_type","in_function","out_function"
"mag_1500_erp_s_name","magento1500","base_sale_multichannels.model_external_shop_group","name","in_out","unicode","result=[('name',ifield)]","result=[('name',record['name'])]"
"mag_1500_erp_s_code","magento1500","base_sale_multichannels.model_external_shop_group","code","in_out","unicode","result=[('code',ifield)]",
"mag_1500_erp_s_web","magento1500","base_sale_multichannels.model_external_shop_group","website_id","in_out","int","result=[('website_id',ifield)]",
"mag_1500_erp_s_isa","magento1500","base_sale_multichannels.model_external_shop_group","is_default","in_out","unicode","result=[('is_default',bool(eval(ifield)))]",
"mag_1500_erp_s_stord","magento1500","base_sale_multichannels.model_external_shop_group","sort_order","in_out","int","result=[('sort_order',ifield)]",
"mag_1500_erp_s_gpid","magento1500","base_sale_multichannels.model_external_shop_group","default_group_id","in_out","int","result=[('default_shop_integer_id',ifield)]",
"mag_1500_erp_sv_name","magento1500","model_magerp_storeviews","name","in_out","unicode","result=[('name',ifield)]","result=[('name',record['name'])]"
"mag_1500_erp_sv_code","magento1500","model_magerp_storeviews","code","in_out","unicode","result=[('code',ifield)]",
"mag_1500_erp_sv_sg","magento1500","model_magerp_storeviews","website_id","in_out","int","result=[('website_id',self.pool.get('external.shop.group').extid_to_oeid(cr, uid, ifield, external_referential_id))]",
"mag_1500_erp_sv_isa","magento1500","model_magerp_storeviews","is_active","in_out","unicode","result=[('is_active',bool(eval(ifield)))]",
"mag_1500_erp_sv_stord","magento1500","model_magerp_storeviews","sort_order","in_out","int","result=[('sort_order',ifield)]",
"mag_1500_erp_sv_gpid","magento1500","model_magerp_storeviews","group_id","in_out","int","result=[('shop_id',self.pool.get('sale.shop').extid_to_oeid(cr, uid, ifield, external_referential_id))]",
"mag_1500_erp_st_name","magento1500","sale.model_sale_shop","name","in_out","unicode","result=[('name',ifield)]","result=[('name',record['name'])]"
"mag_1500_erp_st_gpid","magento1500","sale.model_sale_shop","group_id","in_out","int","result=[('group_id',ifield)]",
"mag_1500_erp_st_grp","magento1500","sale.model_sale_shop","website_id","in_out","int","result=[('shop_group_id',self.pool.get('external.shop.group').extid_to_oeid(cr, uid, ifield, external_referential_id))]",
"mag_1500_erp_st_default_st","magento1500","sale.model_sale_shop","default_store_id","in_out","int","result=[('default_storeview_integer_id',ifield)]",
"mag_1500_erp_st_root_categ","magento1500","sale.model_sale_shop","root_category_id","in_out","int","result=[('root_category_id',ifield)]",
"mag_1500_erp_so_name","magento1500","sale.model_sale_order","increment_id","in_out","unicode","result=[('magento_incrementid',str(ifield)), ('name','mag_' + str(ifield))]",
"mag_1500_erp_so_total_amount","magento1500","sale.model_sale_order","grand_total","in_out","float","result=[('ext_total_amount',str(ifield))]",
"mag_1500_erp_so_carrier_id","magento1500","sale.model_sale_order","shipping_method","in_out","unicode","if not ifield:
	result = []
else:
	carrier_ids = self.pool.get('delivery.carrier').search(cr, uid, [('magento_code', '=', ifield)])
	if carrier_ids:
		result=[('carrier_id', carrier_ids[0])]
	else:
		result=[]",
"mag_1500_erp_so_pay","magento1500","sale.model_sale_order","payment","in_out","unicode","
payments_mapping = {'checkmo': 'manual', 'ccsave': 'prepaid', 'free':'prepaid','googlecheckout':'prepaid','paypayl_express':'prepaid', 'paybox_system': 'prepaid', 'paypal_standard': 'prepaid', 'cashondelivery': 'manual', 'servired_standard': 'prepaid', 'bbva': 'prepaid', 'cofidis': 'prepaid'}
ifield=eval(ifield)
result=[('order_policy', ifield['method'] in payments_mapping and payments_mapping[ifield['method']] or 'prepaid'), ('ext_payment_method', ifield['method'])]",
"mag_1500_erp_soline_name","magento1500","sale.model_sale_order_line","name","in_out","unicode","import re
options_label = []
options_data = data['product_options']
clean = re.sub('\w:\w:|\w:\w+;', '', options_data)
for each in clean.split('{'):
    if each.startswith('""label""'):
        split_info = each.split(';')	
        options_label.append('%s: %s [%s]' % (split_info[1], split_info[3], data['sku']))
	
	
result=[('name', ifield), ('notes',  """".join(options_label).replace('""""', '\n').replace('""', ''))]
",
"mag_1500_erp_soline_pid","magento1500","sale.model_sale_order_line","product_id","in_out","unicode","context['alternative_key'] = data['sku']
result=[('product_id',self.pool.get('product.product').extid_to_oeid(cr, uid, ifield, external_referential_id))]",
"mag_1500_erp_soline_uomqty","magento1500","sale.model_sale_order_line","qty_ordered","in_out","unicode","result=[('product_uom_qty',ifield)]",
"mag_1500_erp_soline_uosqty","magento1500","sale.model_sale_order_line","qty_ordered","in","unicode","result=[('product_uos_qty',ifield)]",
"mag_1500_erp_soline_price","magento1500","sale.model_sale_order_line","price","in","unicode","if context.get('price_is_tax_included', False):             
    result=[('price_unit', (float(data['row_total']) + float(data['tax_amount']))/float(data['qty_ordered']))]
else:
    result=[('price_unit', float(data['row_total'])/float(data['qty_ordered']))]",
"mag_1500_erp_soline_disc","magento1500","sale.model_sale_order_line","discount_amount","in","unicode","result=[('discount', float(data['price']) != 0 and float(data['qty_ordered']) != 0 and float(100*float(ifield))/(float(data['price'])*float(data['qty_ordered'])) or 0)]",
"mag_1500_erp_procat_2","magento1500","product.model_product_category","level","in","int","result=[('sequence',ifield),('level',ifield)]",
"mag_1500_erp_procat_3","magento1500","product.model_product_category","parent_id","in_out","int","record_id = self.pool.get('ir.model.data').search(cr, uid, [('model', '=', self._name), ('name', '=', self.prefixed_id(ifield))])
parent_id = False
if record_id:
	parent_rec = self.pool.get('ir.model.data').read(cr,uid,record_id[0],[])
	parent_id=parent_rec.get('res_id',False)
result=[('magento_parent_id',ifield),('parent_id',parent_id)]","magento_parent_id = False
if record.get('parent_id',False):
	magento_parent_id = self.oeid_to_extid(cr, uid, record.get('parent_id')[0], external_referential_id)
	if not magento_parent_id:
		self.ext_export(cr,uid,[record.get('parent_id',[False])[0]],[external_referential_id],{},context=context)
		magento_parent_id = self.oeid_to_extid(cr, uid, record.get('parent_id')[0], external_referential_id)
if magento_parent_id:
	result = [('parent_id',magento_parent_id)]"
"mag_1500_erp_procat_4","magento1500","product.model_product_category","is_active","in_out","unicode","result=[('is_active',ifield and (eval(ifield)) or False)]","result=[('is_active',record['is_active'])]"
"mag_1500_erp_procat_5","magento1500","product.model_product_category","description","in_out","unicode","result=[('description',ifield)]","result=[('description',record['description'])]"
"mag_1500_erp_procat_6","magento1500","product.model_product_category","meta_title","in_out","unicode","result=[('meta_title',ifield)]","result=[('meta_title',record['meta_title'])]"
"mag_1500_erp_procat_7","magento1500","product.model_product_category","meta_keywords","in_out","unicode","result=[('meta_keywords',ifield)]","result=[('meta_keywords',record['meta_keywords'])]"
"mag_1500_erp_procat_8","magento1500","product.model_product_category","meta_description","in_out","unicode","result=[('meta_description',ifield)]","result=[('meta_description',record['meta_description'])]"
"mag_1500_erp_procat_9","magento1500","product.model_product_category","url_key","in_out","unicode","result=[('url_key',ifield)]","if context.get('export_url', False) :
    result=[('url_key',record['url_key'])]"
"mag_1500_erp_procat_10","magento1500","product.model_product_category","name","in_out","unicode","result=[('name',ifield or 'UNDEFINED'),('magento_exportable',True)]","result=[('name',record['name'])]"
"mag_1500_erp_procat_11","magento1500","product.model_product_category","is_anchor","in_out","unicode","result=[('is_anchor',ifield and bool(eval(ifield)) or False)]","result=[('is_anchor',record['is_anchor'])]"
"mag_1500_erp_procat_12","magento1500","product.model_product_category","available_sort_by","in_out","unicode","attr_ids = []
cat_attr_obj = self.pool.get('magerp.product_category_attribute_options')
if ifield:
    for val in ifield:
        attr_ids.append(cat_attr_obj.get_create_option_id(cr, uid, val,'sort_by', context=context))
    result=[('available_sort_by', [(6, 0, attr_ids)]), ('use_default_available_sort_by', False)]
else:
    result=[('use_default_available_sort_by', True)]","if record['use_default_available_sort_by']:
    res = u'None'
else:
    res = []
    for cat_attr_option in self.pool.get('magerp.product_category_attribute_options').browse(cr, uid, record['available_sort_by'], context=context):
        res.append(cat_attr_option.value)
result=[('available_sort_by', res)]"
"mag_1500_erp_procat_13","magento1500","product.model_product_category","default_sort_by","in_out","unicode","if ifield:
    att_id = self.pool.get('magerp.product_category_attribute_options').get_create_option_id(cr, uid, ifield,'sort_by', context=context)
else:
    att_id = self.pool.get('magerp.product_category_attribute_options').get_create_option_id(cr, uid, 'None','sort_by', context=context)
result=[('default_sort_by',att_id)]","cat_attr_option = self.pool.get('magerp.product_category_attribute_options').browse(cr, uid, record['default_sort_by'][0], context=context)
result=[('default_sort_by', cat_attr_option.value)]"
"mag_1500_erp_procat_14","magento1500","product.model_product_category","updated_at","in","unicode","result=[('magerp_stamp',ifield)]",
"mag_1500_erp_procat_15","magento1500","product.model_product_category","image","in_out","unicode","image_binary = False
if ifield and not ifield=='None':
	try:
		image_binary = conn.call('ol_catalog_category_media.info', [int(data['category_id'])])
	except Exception, e:
		print e
		pass
	if image_binary:
		image_binary = base64.encodestring(base64.urlsafe_b64decode(image_binary[0]['image_data']))
result=[('image_name',ifield),('image',image_binary)]","if record['image']:
	img = base64.decodestring(record['image'])
        img_bin_enc = base64.encodestring(img) 
        conn.call('ol_catalog_category_media.create', [record['image_name'], img_bin_enc])
	result = [('image',record['image_name'])]
else:
	result=[]"
"mag_1500_erp_procat_16","magento1500","product.model_product_category","include_in_menu","in_out","unicode","result=[('include_in_menu', ifield and (eval(ifield)) or False)]","result=[('include_in_menu',record['include_in_menu'])]"
"mag_1500_erp_procat_17","magento1500","product.model_product_category","page_layout","in_out","unicode","if ifield:
    att_id = self.pool.get('magerp.product_category_attribute_options').get_create_option_id(cr, uid, ifield,'page_layout', context=context)
else:
    att_id = self.pool.get('magerp.product_category_attribute_options').get_create_option_id(cr, uid, 'None','page_layout', context=context)
result=[('page_layout',att_id)]","result=[('page_layout', record['page_layout'][1] or '')]"
"mag_1500_erp_attrgrp_2","magento1500","model_magerp_product_attribute_groups","attribute_set_id","in_out","int","result=[('attribute_set_id', ifield)]","result=[('attribute_set_id', record['attribute_set_id'])]"
"mag_1500_erp_attrgrp_3","magento1500","model_magerp_product_attribute_groups","attribute_group_name","in_out","unicode","result=[('attribute_group_name', ifield)]","result=[('attribute_group_name', record['attribute_group_name'])]"
"mag_1500_erp_attrgrp_4","magento1500","model_magerp_product_attribute_groups","sort_order","in_out","int","result=[('sort_order', ifield)]","result=[('sort_order', record['sort_order'])]"
"mag_1500_erp_attrgrp_5","magento1500","model_magerp_product_attribute_groups","default_id","in_out","int","result=[('default_id', ifield)]","result=[('default_id', record['default_id'])]"
"mag_1500_erp_attrset_1","magento1500","model_magerp_product_attribute_set","attribute_set_id","in_out","int","result=[('magento_id', ifield)]","result=[('attribute_set_id', record['magento_id'])]"
"mag_1500_erp_attrset_2","magento1500","model_magerp_product_attribute_set","sort_order","in_out","int","result=[('sort_order', ifield)]","result=[('sort_order', record['sort_order'])]"
"mag_1500_erp_attrset_3","magento1500","model_magerp_product_attribute_set","attribute_set_name","in_out","unicode","result=[('attribute_set_name', ifield)]","result=[('attribute_set_name', record['attribute_set_name'])]"
"mag_1500_erp_attr_1","magento1500","model_magerp_product_attributes","attribute_code","in_out","unicode","result=[('attribute_code', ifield)]","result=[('code', record['attribute_code'])]"
"mag_1500_erp_attr_2","magento1500","model_magerp_product_attributes","attribute_id","in_out","int","result=[('magento_id', ifield)]",
"mag_1500_erp_attr_3","magento1500","model_magerp_product_attributes","frontend_input","in_out","unicode","result=[('frontend_input', ifield)]","result=[('frontend_input', record['frontend_input'])]"
"mag_1500_erp_attr_4","magento1500","model_magerp_product_attributes","frontend_class","in_out","unicode","result=[('frontend_class', ifield)]","result=[('frontend_class', record['frontend_class'])]"
"mag_1500_erp_attr_5","magento1500","model_magerp_product_attributes","backend_model","in_out","unicode","result=[('backend_model', ifield)]","result=[('backend_model', record['backend_model'])]"
"mag_1500_erp_attr_6","magento1500","model_magerp_product_attributes","backend_type","in_out","unicode","result=[('backend_type', ifield)]","result=[('backend_type', record['backend_type'])]"
"mag_1500_erp_attr_7","magento1500","model_magerp_product_attributes","frontend_label","in_out","unicode","result=[('frontend_label', ifield)]","result=[('frontend_label', record['frontend_label'])]"
"mag_1500_erp_attr_8","magento1500","model_magerp_product_attributes","is_visible_in_advanced_search","in_out","unicode","result=[('is_visible_in_advanced_search', bool(eval(ifield)))]","result=[('is_visible_in_advanced_search', record['is_visible_in_advanced_search'])]"
"mag_1500_erp_attr_9","magento1500","model_magerp_product_attributes","is_global","in_out","unicode","result=[('is_global', bool(eval(ifield)))]","result=[('is_global', record['is_global'])]"
"mag_1500_erp_attr_10","magento1500","model_magerp_product_attributes","is_filterable","in_out","unicode","result=[('is_filterable', bool(eval(ifield)))]","result=[('is_filterable', record['is_filterable'])]"
"mag_1500_erp_attr_11","magento1500","model_magerp_product_attributes","is_comparable","in_out","unicode","result=[('is_comparable', bool(eval(ifield)))]","result=[('is_comparable', record['is_comparable'])]"
"mag_1500_erp_attr_12","magento1500","model_magerp_product_attributes","is_visible","in_out","unicode","result=[('is_visible', bool(eval(ifield)))]","result=[('is_visible', record['is_visible'])]"
"mag_1500_erp_attr_13","magento1500","model_magerp_product_attributes","is_searchable","in_out","unicode","result=[('is_searchable', bool(eval(ifield)))]","result=[('is_searchable', record['is_searchable'])]"
"mag_1500_erp_attr_14","magento1500","model_magerp_product_attributes","is_user_defined","in_out","unicode","result=[('is_user_defined', bool(eval(ifield)))]","result=[('is_user_defined', record['is_user_defined'])]"
"mag_1500_erp_attr_15","magento1500","model_magerp_product_attributes","is_configurable","in_out","unicode","result=[('is_configurable', bool(eval(ifield)))]","result=[('is_configurable', record['is_configurable'])]"
"mag_1500_erp_attr_16","magento1500","model_magerp_product_attributes","is_visible_on_front","in_out","unicode","result=[('is_visible_on_front', bool(eval(ifield)))]","result=[('is_visible_on_front', record['is_visible_on_front'])]"
"mag_1500_erp_attr_17","magento1500","model_magerp_product_attributes","is_used_for_price_rules","in_out","unicode","result=[('is_used_for_price_rules', bool(eval(ifield)))]","result=[('is_used_for_price_rules', record['is_used_for_price_rules'])]"
"mag_1500_erp_attr_18","magento1500","model_magerp_product_attributes","is_unique","in_out","unicode","result=[('is_unique', bool(eval(ifield)))]","result=[('is_unique', record['is_unique'])]"
"mag_1500_erp_attr_19","magento1500","model_magerp_product_attributes","is_required","in_out","unicode","result=[('is_required', bool(eval(ifield)))]","result=[('is_required', record['is_required'])]"
"mag_1500_erp_attr_20","magento1500","model_magerp_product_attributes","position","in_out","int","result=[('position', ifield)]","result=[('position', record['position'])]"
"mag_1500_erp_attr_21","magento1500","model_magerp_product_attributes","attribute_set_info","in_out","unicode","result=[('attribute_set_info', ifield)]","result=[('attribute_set_info', record['attribute_set_info'])]"
"mag_1500_erp_attr_22","magento1500","model_magerp_product_attributes","default_value","in_out","unicode","result=[('default_value', ifield)]","result=[('default_value', record['default_value'])]"
"mag_1500_erp_attr_23","magento1500","model_magerp_product_attributes","note","in_out","unicode","result=[('note', ifield)]","result=[('note', record['note'])]"
"mag_1500_erp_attr_24","magento1500","model_magerp_product_attributes","entity_type_id","in_out","int","result=[('entity_type_id', ifield)]","result=[('entity_type_id', record['entity_type_id'])]"
"mag_1500_erp_attr_25","magento1500","model_magerp_product_attributes","apply_to","in_out","unicode","result=[('apply_to', str(ifield))]","result=[('apply_to', eval(record['%s']))]"
"mag_1500_erp_prd_1","magento1500","product.model_product_product","url_key","in_out","unicode","result=[('x_magerp_url_key',ifield)]","if context.get('export_url', False) :
    result=[('url_key',record['x_magerp_url_key'])]"
"mag_1500_erp_prd_2","magento1500","product.model_product_product","name","in_out","unicode","result = [('name',ifield)]","result = [('name',record['name'])]"
"mag_1500_erp_prd_3","magento1500","product.model_product_product","description","in_out","unicode","result = [('description',ifield)]",
"mag_1500_erp_prd_4","magento1500","product.model_product_product","short_description","in_out","unicode","result = [('description_sale',ifield)]",
"mag_1500_erp_prd_5","magento1500","product.model_product_product","sku","in_out","unicode","result = [('magento_sku',ifield), ('default_code',ifield)]",
"mag_1500_erp_prd_6","magento1500","product.model_product_product","weight","in_out","float","result = [('weight',ifield)]","result = [('weight',record['weight'] or 0)]"
"mag_1500_erp_prd_7","magento1500","product.model_product_product","categories","in_out","unicode","categ_ids =[]
if len(eval(ifield)) > 0:
    for category_ids in eval(ifield):
        categ_ids.append(self.pool.get('product.category').extid_to_oeid(cr, uid, category_ids, external_referential_id))
    categ_id = categ_ids.pop()
else:
    categ_id = self.pool.get('external.referential').browse(cr, uid, external_referential_id).default_pro_cat.id
result = [('categ_id', categ_id), ('categ_ids',[(6, 0, categ_ids)])]","
product = self.browse(cr, uid, record['id'])
main_categ_id = self.pool.get('product.category').oeid_to_extid(cr, uid, product.categ_id.id, external_referential_id)
categ_ids = [main_categ_id]
for categ in product.categ_ids: #deal with extra m2m categories
    categ_id =  self.pool.get('product.category').oeid_to_extid(cr, uid, categ.id, external_referential_id)
    if categ_id:
        categ_ids.append(categ_id)
result=[('categories', categ_ids)]"
"mag_1500_erp_prd_8","magento1500","product.model_product_product","price","in_out","float","result=[('list_price',ifield)]","result=[]#map later"
"mag_1500_erp_prd_9","magento1500","product.model_product_product","cost","in_out","float","result=[('standard_price',ifield)]","result = [('cost',record['standard_price'] or 0)]"
"mag_1500_erp_prd_10","magento1500","product.model_product_product","set","in_out","unicode","result=[('set',self.pool.get('magerp.product_attribute_set').extid_to_oeid(cr, uid, ifield, external_referential_id))]",
"mag_1500_erp_prd_11","magento1500","product.model_product_product","special_price","in_out","float","result = [('x_magerp_special_price',ifield)]",
"mag_1500_erp_prd_12","magento1500","product.model_product_product","tier_price","in_out","unicode","result=[]#no mapping by default","result=[]#no mapping by default"
"mag_1500_erp_prd_13","magento1500","product.model_product_product","minimal_price","in_out","float","result = [('x_magerp_minimal_price',ifield)]","
if record['x_magerp_minimal_price'] and record['x_magerp_minimal_price'] != 0:
    result = [('minimal_price',record['x_magerp_minimal_price'])]
else:
    result = [('minimal_price',False)]"
"mag_1500_erp_prd_14","magento1500","product.model_product_product","type_id","in_out","unicode","if ifield:
    product_type_ids  = self.pool.get('magerp.product_product_type').search(cr,uid,[('product_type','=',ifield)])
    if product_type_ids:
        result = [('product_type',ifield)]","if 'product_type' in record and record['product_type']:
    result = [('type_id',record['product_type'])]
else:
    result = [('type_id','simple')]"
"mag_1500_erp_prd_15","magento1500","product.model_product_product","websites","in_out","unicode","websites_ids = []
for ext_id in eval(ifield):
    websites_ids.append(self.pool.get('external.shop.group').extid_to_oeid(cr, uid, ext_id, external_referential_id))

##### OPTION START, with this if the field websites of the product is empty the product is exported on every website
all_oe_websites_ids = self.pool.get('external.shop.group').search(cr,uid,[('referential_id', '=', external_referential_id)])
if set(websites_ids) == set(all_oe_websites_ids):
    websites_ids =[]
##### OPTION END

result=[('websites_ids', [(6,0, websites_ids)])]","##### OPTION START, with this if the field websites of the product is empty the product is exported on every website
if not record['websites_ids']:
    record['websites_ids'] = self.pool.get('external.shop.group').search(cr,uid,[('referential_id', '=', external_referential_id)])
##### OPTION END

ext_websites_ids = []
for oe_id in record['websites_ids']:
    ext_websites_ids.append(self.pool.get('external.shop.group').oeid_to_extid(cr, uid, oe_id, external_referential_id))

result=[('websites', ext_websites_ids)]"
"magento_1500_cst_grp_1","magento1500","base.model_res_partner_category","customer_group_code","in","unicode","result=[('name',ifield)]",
"magento_1500_cst_grp_3","magento1500","base.model_res_partner_category","tax_class_id","in","int","result=[('tax_class_id',ifield)]",
"magento_1500_prt_adr_2","magento1500","base.model_res_partner_address","city","in_out","unicode","result=[('city',ifield)]",
"magento_1500_prt_adr_3","magento1500","base.model_res_partner_address","fax","in_out","unicode","result=[('fax',ifield)]",
"magento_1500_prt_adr_4","magento1500","base.model_res_partner_address","firstname","in_out","unicode","result = [('name', (data.get('company', False) and (data['company'] + ' ; ') or '') + ifield + ' ' + data['lastname']), ('firstname', ifield), ('lastname', data['lastname'])]",
"magento_1500_prt_adr_6","magento1500","base.model_res_partner_address","is_active","in_out","unicode","result=[('active',bool(eval(ifield)))]",
"magento_1500_prt_adr_7","magento1500","base.model_res_partner_address","country_id","in_out","unicode","result = self.pool.get('res.country').search(cr,uid,[('code','=',ifield)])
if result and len(result)==1:
	result=[('country_id',result[0])]
else:
	result=[]
",
"magento_1500_prt_adr_8","magento1500","base.model_res_partner_address","street","in_out","unicode","if ifield:
	if len(ifield.split('\n')) ==2 :
		result = [('street', ifield.split('\n')[0]) , ('street2', ifield.split('\n')[1])]
	else :
		result = [('street',ifield.replace('\\n',','))]
else:
	result = []",
"magento_1500_prt_adr_9","magento1500","base.model_res_partner_address","postcode","in_out","unicode","result=[('zip',ifield)]",
"magento_1500_prt_adr_10","magento1500","base.model_res_partner_address","telephone","in_out","unicode","result=[('phone',ifield)]",
"magento_1500_prt_adr_11","magento1500","base.model_res_partner_address","region","in_out","unicode","if ifield:
	result = self.pool.get('res.country.state').search(cr,uid,[('name','ilike',ifield)])
	if result and len(result)==1:
		result = [('state_id',result[0])]
	else:
		result=[]
else:
	result=[]",
"magento_1500_prt_adr_13","magento1500","base.model_res_partner_address","customer_id","in_out","int","result=self.pool.get('res.partner').extid_to_oeid(cr,uid,ifield,external_referential_id)
if result:
	result=[('partner_id',result)]
else:
	result=[('partner_id',False)]",
"magento_1500_prt_adr_14","magento1500","base.model_res_partner_address","address_type","in_out","unicode","if ifield=='billing':
	result=[('type','invoice')]
elif ifield=='shipping':
	result=[('type','delivery')]
else:
	result=[]",
"magento_1500_prt_adr_15","magento1500","base.model_res_partner_address","email","in_out","unicode","result=[('email',ifield)]",
"magento_1500_prt_2","magento1500","base.model_res_partner","group_id","in_out","int","if ifield:
	result=self.pool.get('res.partner.category').extid_to_oeid(cr,uid,ifield,external_referential_id)
	if result:
		result=[('group_id',result)]",
"magento_1500_prt_3","magento1500","base.model_res_partner","store_id","in_out","int","if ifield:
	result=self.pool.get('magerp.storeviews').extid_to_oeid(cr,uid,ifield,external_referential_id)
	if result:
		lang = self.pool.get('magerp.storeviews').browse(cr, uid, result).lang_id
		result=[('store_id',result),('lang',lang and lang.code or False)]",
"magento_1500_prt_4","magento1500","base.model_res_partner","website_id","in_out","int","if ifield:
	result=self.pool.get('external.shop.group').extid_to_oeid(cr,uid,ifield,external_referential_id)
	if result:
		result=[('website_id',result)]",
"magento_1500_prt_5","magento1500","base.model_res_partner","created_in","in_out","unicode","result=[('created_in',ifield)]",
"magento_1500_prt_6","magento1500","base.model_res_partner","created_at","in_out","unicode","result=[('created_at',ifield)]",
"magento_1500_prt_7","magento1500","base.model_res_partner","updated_at","in_out","unicode","result=[('updated_at',ifield)]",
"magento_1500_prt_8","magento1500","base.model_res_partner","firstname","in_out","unicode","result = [('name', ifield + ' ' + data['lastname'])]","add_id = self.browse(cr, uid, record['id'])
fn = add_id.address[0].firstname
ln = add_id.address[0].lastname
result=[('firstname', fn), ('lastname', ln)]"
"magento_1500_prt_10","magento1500","base.model_res_partner","email","in_out","unicode","result=[('emailid',ifield)]",
"magento_1500_prt_11","magento1500","base.model_res_partner","taxvat","in_out","unicode","if ifield:
	result=[('mag_vat',ifield)]
else:
	result=[]",
"magento_1500_prt_12","magento1500","base.model_res_partner","dob","in_out","unicode","if ifield:
	result =[('mag_birthday',ifield[:10])]
else:
	result=[]",
